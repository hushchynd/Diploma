# Generated by Django 4.1.3 on 2023-05-12 19:44

import admin_panel.models.user
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=150, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Электронная почта')),
                ('first_name', models.CharField(max_length=150, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Имя должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Фамилия должна начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Фамилия')),
                ('phone', models.CharField(max_length=19, validators=[django.core.validators.MaxLengthValidator(19), django.core.validators.MinLengthValidator(19), django.core.validators.ProhibitNullCharactersValidator(), django.core.validators.RegexValidator('^\\+38 \\(\\d{3}\\) \\d{3}-?\\d{2}-?\\d{2}$', message='Неверно введён номер телефона.Пример ввода: +38 (098) 567-81-23')], verbose_name='Номер телефона')),
                ('address', models.CharField(max_length=50, validators=[django.core.validators.MaxLengthValidator(50), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Адрес должен начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Город')),
                ('sex', models.CharField(choices=[('Мужской', 'Мужской'), ('Женский', 'Женский')], default='Мужской', max_length=50, verbose_name='Пол')),
                ('lang', models.CharField(choices=[('Английский', 'Английский'), ('Русский', 'Русский')], default='Русский', max_length=50, verbose_name='Язык')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='День рождения')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', admin_panel.models.user.AccountManager()),
            ],
        ),
        migrations.CreateModel(
            name='BackImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='')),
            ],
            options={
                'db_table': 'back_img',
            },
        ),
        migrations.CreateModel(
            name='BottomCarousel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='')),
                ('link', models.URLField(default='', validators=[django.core.validators.URLValidator(message='XYZ', regex='https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)')], verbose_name='')),
            ],
            options={
                'db_table': 'bottom_carousel',
            },
        ),
        migrations.CreateModel(
            name='CafeBarMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название блюда должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_en', models.CharField(max_length=150, null=True, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название блюда должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_ru', models.CharField(max_length=150, null=True, validators=[django.core.validators.MaxLengthValidator(150), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название блюда должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('weight', models.PositiveSmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Вес(грамм)')),
                ('price', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Цена')),
            ],
            options={
                'db_table': 'cafe_bar_menu',
            },
        ),
        migrations.CreateModel(
            name='Cinema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[django.core.validators.MaxLengthValidator(100), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название кинотеатра должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_en', models.CharField(max_length=100, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(100), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название кинотеатра должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_ru', models.CharField(max_length=100, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(100), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название кинотеатра должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('description', models.TextField(max_length=10000, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_en', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_ru', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('banner', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Баннер')),
                ('logo', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Логотип')),
            ],
            options={
                'db_table': 'cinema',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(max_length=100, null=True)),
                ('name_ru', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'countries',
            },
        ),
        migrations.CreateModel(
            name='Editor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(max_length=100, null=True)),
                ('name_ru', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'editors',
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, validators=[django.core.validators.MaxLengthValidator(20), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_en', models.CharField(max_length=20, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(20), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_ru', models.CharField(max_length=20, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(20), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('description', models.TextField(validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_en', models.TextField(null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_ru', models.TextField(null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('card_img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Картинка карточки')),
                ('released', models.DateField(verbose_name='Дата выхода')),
                ('trailer_link', models.URLField(validators=[django.core.validators.URLValidator(message='XYZ', regex='https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)')], verbose_name='Ссылка на трейлер')),
                ('banner', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Баннер')),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(2100), django.core.validators.MinValueValidator(1900)], verbose_name='Год')),
                ('budget', models.PositiveIntegerField(verbose_name='Бюджет')),
                ('legal_age', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(18), django.core.validators.MinValueValidator(8)], verbose_name='Мин Возраст')),
                ('duration', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(10)], verbose_name='Длительность')),
                ('countries', models.ManyToManyField(to='admin_panel.country', verbose_name='Страны')),
                ('editors', models.ManyToManyField(to='admin_panel.editor', verbose_name='Режисёры')),
            ],
            options={
                'db_table': 'films',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(max_length=100, null=True)),
                ('name_ru', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'genres',
            },
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(unique=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Номер зала')),
                ('banner', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Баннер')),
                ('description', models.TextField(max_length=10000, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_en', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_ru', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('num_tickets', models.PositiveSmallIntegerField(verbose_name='Кол-во биллетов')),
                ('scheme', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Схема зала')),
                ('creation_date', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('scheme_html', models.TextField(blank=True, null=True)),
                ('cinema', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.cinema')),
            ],
            options={
                'db_table': 'halls',
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, validators=[django.core.validators.MaxLengthValidator(30, 'Длина названия новости должна быть не более 30ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название новости должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_en', models.CharField(max_length=30, null=True, validators=[django.core.validators.MaxLengthValidator(30, 'Длина названия новости должна быть не более 30ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название новости должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_ru', models.CharField(max_length=30, null=True, validators=[django.core.validators.MaxLengthValidator(30, 'Длина названия новости должна быть не более 30ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название новости должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('short_description', models.TextField(max_length=250, validators=[django.core.validators.MaxLengthValidator(250), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Краткое описание')),
                ('short_description_en', models.TextField(max_length=250, null=True, validators=[django.core.validators.MaxLengthValidator(250), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Краткое описание')),
                ('short_description_ru', models.TextField(max_length=250, null=True, validators=[django.core.validators.MaxLengthValidator(250), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Краткое описание')),
                ('description', models.TextField(max_length=10000, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_en', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_ru', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('creation_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('turn_on', models.BooleanField(default=False, verbose_name='ВКЛ/ВЫКЛ')),
                ('video_link', models.URLField(validators=[django.core.validators.URLValidator(message='XYZ', regex='https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)')], verbose_name='Ссылка на видео')),
                ('banner', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Баннер')),
                ('card_img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Картинка карточки')),
            ],
            options={
                'db_table': 'news',
            },
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(max_length=100, null=True)),
                ('name_ru', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'operators',
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[django.core.validators.MaxLengthValidator(100, 'Длина названия страницы должна быть не более 100 символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название страницы должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_en', models.CharField(max_length=100, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(100, 'Длина названия страницы должна быть не более 100 символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название страницы должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_ru', models.CharField(max_length=100, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(100, 'Длина названия страницы должна быть не более 100 символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название страницы должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('description', models.TextField(max_length=10000, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_en', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_ru', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('banner', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Баннер')),
                ('first_pic', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Первая картинка')),
                ('second_pic', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Вторая картинка')),
                ('third_pic', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Третья картинка')),
                ('description2', models.TextField(max_length=10000, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Второе описание')),
                ('description2_en', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Второе описание')),
                ('description2_ru', models.TextField(max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Второе описание')),
                ('turn_on', models.BooleanField(default=False, verbose_name='ВКЛ/ВЫКЛ')),
                ('creation_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('able_to_del', models.BooleanField(default=True)),
                ('cinema', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.cinema')),
            ],
            options={
                'db_table': 'pages',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Producer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(max_length=100, null=True)),
                ('name_ru', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'producers',
            },
        ),
        migrations.CreateModel(
            name='ScriptWriter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(max_length=100, null=True)),
                ('name_ru', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'scriptwriters',
            },
        ),
        migrations.CreateModel(
            name='Seance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата')),
                ('price', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена')),
                ('time', models.TimeField(verbose_name='Время')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.film', verbose_name='Фильм')),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.hall', verbose_name='Зал')),
            ],
            options={
                'db_table': 'seances',
            },
        ),
        migrations.CreateModel(
            name='SeoBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, validators=[django.core.validators.MaxLengthValidator(50, 'Название не более 20ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('title_en', models.CharField(max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50, 'Название не более 20ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('title_ru', models.CharField(max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50, 'Название не более 20ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('url', models.URLField(validators=[django.core.validators.URLValidator(message='XYZ', regex='https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)')], verbose_name='Ссылка')),
                ('seo_description', models.TextField(null=True, validators=[django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('seo_description_en', models.TextField(null=True, validators=[django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('seo_description_ru', models.TextField(null=True, validators=[django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('keywords', models.CharField(max_length=255, validators=[django.core.validators.MaxLengthValidator(255), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Ключевые слова')),
                ('keywords_en', models.CharField(max_length=255, null=True, validators=[django.core.validators.MaxLengthValidator(255), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Ключевые слова')),
                ('keywords_ru', models.CharField(max_length=255, null=True, validators=[django.core.validators.MaxLengthValidator(255), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Ключевые слова')),
            ],
            options={
                'db_table': 'seo_block',
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True, validators=[django.core.validators.MaxLengthValidator(30, 'Длина названия акции должна быть не более 30ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название акции должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_en', models.CharField(max_length=30, null=True, validators=[django.core.validators.MaxLengthValidator(30, 'Длина названия акции должна быть не более 30ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название акции должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_ru', models.CharField(max_length=30, null=True, validators=[django.core.validators.MaxLengthValidator(30, 'Длина названия акции должна быть не более 30ти символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название акции должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('short_description', models.TextField(blank=True, max_length=250, validators=[django.core.validators.MaxLengthValidator(250), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Краткое описание')),
                ('short_description_en', models.TextField(blank=True, max_length=250, null=True, validators=[django.core.validators.MaxLengthValidator(250), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Краткое описание')),
                ('short_description_ru', models.TextField(blank=True, max_length=250, null=True, validators=[django.core.validators.MaxLengthValidator(250), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Краткое описание')),
                ('description', models.TextField(blank=True, max_length=10000, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_en', models.TextField(blank=True, max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('description_ru', models.TextField(blank=True, max_length=10000, null=True, validators=[django.core.validators.MaxLengthValidator(10000), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Описание')),
                ('creation_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('turn_on', models.BooleanField(default=False, verbose_name='ВКЛ/ВЫКЛ')),
                ('video_link', models.URLField(validators=[django.core.validators.URLValidator(message='XYZ', regex='https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)')], verbose_name='Ссылка на видео')),
                ('banner', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Баннер')),
                ('card_img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Картинка карточки')),
                ('seo_block', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.seoblock')),
            ],
            options={
                'db_table': 'stocks',
            },
        ),
        migrations.CreateModel(
            name='TechnologyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('name_en', models.CharField(max_length=50, null=True)),
                ('name_ru', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'technology_type',
            },
        ),
        migrations.CreateModel(
            name='TemplateHtml',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_html', models.FileField(upload_to='templates_html', verbose_name='Html шаблон')),
                ('date_uploaded', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'db_table': 'template_html',
                'ordering': ['-date_uploaded'],
            },
        ),
        migrations.CreateModel(
            name='TopCarousel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='')),
                ('link', models.URLField(default='', validators=[django.core.validators.URLValidator(message='XYZ', regex='https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)')], verbose_name='')),
                ('title', models.CharField(default='', max_length=50, validators=[django.core.validators.MaxLengthValidator(50), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Заголовок должен начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='')),
                ('title_en', models.CharField(default='', max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Заголовок должен начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='')),
                ('title_ru', models.CharField(default='', max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Заголовок должен начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='')),
            ],
            options={
                'db_table': 'top_carousel',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('second_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('row', models.PositiveSmallIntegerField()),
                ('seat', models.PositiveSmallIntegerField()),
                ('seance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.seance')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tickets',
            },
        ),
        migrations.CreateModel(
            name='StockImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.stock')),
            ],
            options={
                'db_table': 'stock_imgs',
            },
        ),
        migrations.AddField(
            model_name='seance',
            name='tech_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.technologytype', verbose_name='Технология'),
        ),
        migrations.CreateModel(
            name='PageImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.page')),
            ],
            options={
                'db_table': 'pages_imgs',
            },
        ),
        migrations.AddField(
            model_name='page',
            name='seo_block',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.seoblock'),
        ),
        migrations.CreateModel(
            name='NewsImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.news')),
            ],
            options={
                'db_table': 'news_imgs',
            },
        ),
        migrations.AddField(
            model_name='news',
            name='seo_block',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.seoblock'),
        ),
        migrations.CreateModel(
            name='MainPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=19, unique=True, validators=[django.core.validators.MaxLengthValidator(19), django.core.validators.MinLengthValidator(19), django.core.validators.ProhibitNullCharactersValidator(), django.core.validators.RegexValidator('^\\+38 \\(\\d{3}\\) \\d{3}-?\\d{2}-?\\d{2}$', message='Неверно введён номер телефона.Пример ввода: +38 (098) 567-81-23')], verbose_name='Телефон 1')),
                ('number2', models.CharField(max_length=19, unique=True, validators=[django.core.validators.MaxLengthValidator(19), django.core.validators.MinLengthValidator(19), django.core.validators.ProhibitNullCharactersValidator(), django.core.validators.RegexValidator('^\\+38 \\(\\d{3}\\) \\d{3}-?\\d{2}-?\\d{2}$', message='Неверно введён номер телефона.Пример ввода: +38 (098) 567-81-23')], verbose_name='Телефон 2')),
                ('seo_text', models.TextField(max_length=500, validators=[django.core.validators.MaxLengthValidator(500), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='SEO текст')),
                ('seo_text_en', models.TextField(max_length=500, null=True, validators=[django.core.validators.MaxLengthValidator(500), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='SEO текст')),
                ('seo_text_ru', models.TextField(max_length=500, null=True, validators=[django.core.validators.MaxLengthValidator(500), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', message='Описание должно начинаться с заглавной буквы.'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='SEO текст')),
                ('seo_block', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.seoblock')),
            ],
            options={
                'db_table': 'main_page',
            },
        ),
        migrations.CreateModel(
            name='HallImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='')),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.hall')),
            ],
            options={
                'db_table': 'halls_imgs',
            },
        ),
        migrations.AddField(
            model_name='hall',
            name='seo_block',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.seoblock'),
        ),
        migrations.CreateModel(
            name='FilmImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.film')),
            ],
            options={
                'db_table': 'film_imgs',
            },
        ),
        migrations.AddField(
            model_name='film',
            name='genres',
            field=models.ManyToManyField(to='admin_panel.genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='film',
            name='operators',
            field=models.ManyToManyField(to='admin_panel.operator', verbose_name='Операторы'),
        ),
        migrations.AddField(
            model_name='film',
            name='producers',
            field=models.ManyToManyField(to='admin_panel.producer', verbose_name='Продюсеры'),
        ),
        migrations.AddField(
            model_name='film',
            name='scriptwriters',
            field=models.ManyToManyField(to='admin_panel.scriptwriter', verbose_name='Сценаристы'),
        ),
        migrations.AddField(
            model_name='film',
            name='seo_block',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.seoblock'),
        ),
        migrations.AddField(
            model_name='film',
            name='technology_types',
            field=models.ManyToManyField(to='admin_panel.technologytype', verbose_name='Форматы'),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[django.core.validators.MaxLengthValidator(100, 'Длина названия должна быть не более 100 символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_en', models.CharField(max_length=100, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(100, 'Длина названия должна быть не более 100 символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('name_ru', models.CharField(max_length=100, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(100, 'Длина названия должна быть не более 100 символов.'), django.core.validators.RegexValidator('^[A-ZА-Я]{1}.*', 'Название должно начинаться с заглавной буквы'), django.core.validators.ProhibitNullCharactersValidator()], verbose_name='Название')),
                ('address', models.TextField(verbose_name='Адрес')),
                ('address_en', models.TextField(null=True, verbose_name='Адрес')),
                ('address_ru', models.TextField(null=True, verbose_name='Адрес')),
                ('coordinate', models.TextField()),
                ('logo', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='Логотип')),
                ('cinema', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.cinema')),
            ],
            options={
                'db_table': 'contacts',
            },
        ),
        migrations.CreateModel(
            name='CinemaImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(null=True, unique=True, upload_to='photos/%Y/%m/%d/', verbose_name='')),
                ('cinema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.cinema')),
            ],
            options={
                'db_table': 'cinema_imgs',
            },
        ),
        migrations.AddField(
            model_name='cinema',
            name='seo_block',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.seoblock'),
        ),
    ]
